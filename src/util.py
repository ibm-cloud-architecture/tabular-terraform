# @file util.py
#
# Copyright IBM Corporation 2021
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
#import argparse
#import json
#import yaml
#import shutil
import numpy as np
import pandas as pd

# Constants

TOOLNAME = 'tabular-terraform'
TOOLVERSION = '1.20.0.2'

# Following static string is included in binary - update version here.
COPYRIGHT = TOOLNAME + ' ' + TOOLVERSION + ' - Copyright IBM Corporation 2021'

genheader = '# Generated by tabular-terraform'

dataheader = 'data "%s" "%s" {'
moduleheader = 'module "%s" {'
outputheader = 'output "%s" {'
providerheader = 'provider "%s" {'
resourceheader = 'resource "%s" "%s" {'
terraformheader = 'terraform {'
variableheader = 'variable "%s" {'

enddata = '}'
endmodule = '}'
endoutput = '}'
endprovider = '}'
endresource = '}'
endterraform = '}'
endvariable = '}'

# Messages

toolheader = 'Transform tabularized Terraform data into Terraform resources\n'
starttoolmessage = 'Starting with input from %s\n'
donetoolmessage = 'Completed with output to %s\n'
startprovidermessage = 'Generating Resource for provider\n'
startversionsmessage = 'Generating Resource for versions\n'
donetfmessage = '\nCompleted Resources for %s with output to folder %s\n'
backupdirectorymessage = 'Backed up existing output directory %s to %s\n'
invalidinputdirectorymessage = '(Error) Invalid input directory: %s'
invalidinputfilemessage = '(Error) Invalid input file: %s'
invalidprotocolmessage = '(Error) Invalid protocol: %s'
invalidgatewayspecmessage = '(Error) Invalid gateway specification: %s'
invalidnicmessage = '(Error) Invalid nic: %s'
invalidsecondarynicmessage = '(Error) Invalid secondary nic: %s'
missinginputmessage = '(Error) No input files found: %s'
missingimagemessage = '(Error) Image %s not found'
missingzonemessage = '(Error) Zone %s not found'
missingsubnetmessage = '(Error) Subnet for %s not found'
missingimageprofilemessage = '(Error) Image profile %s not found'
missingvolumeprofilemessage = '(Error) Volume profile %s not found'
missingvaluemessage = '(Error) Required value missing on column %s, row %s'
processingsheetmessage = 'Processing %s'

# Global data

userdata = {
'inputdirectory': '',
'outputdirectory': '',
'inputtype': 'xlsx',
'propext': 'xlsx',
'propfile': '',
'propname': '*'
}

# Resource names

# Translate sheet names to resource names.
# Resource names are not used as sheet names due to sheet name limit.
resources = {
'aclheaders': 'ibm_is_network_acl',
'aclrules': 'ibm_is_network_acl',
'cisdomains': 'ibm_cis_domain',
'cisglbs': 'ibm_cis_global_load_balancer',
'cishealthchecks': 'ibm_cis_healthcheck',
'cisinstances': 'ibm_cis',
'cisoriginpools': 'ibm_cis_origin_pool',
'floatingips': 'ibm_is_floating_ip',
'flowlogs': 'ibm_is_flow_log',
'ikepolicies': 'ibm_is_ike_policy',
'images': 'ibm_is_image',
'instances': 'ibm_is_instance',
'instancegroups': 'ibm_is_instance_group',
'instancemanagers': 'ibm_is_instance_group_manager',
'instancepolicies': 'ibm_is_instance_group_manager_policy',
'instancetemplates': 'ibm_is_instance_template',
'ipsecpolicies': 'ibm_is_ipsec_policy',
'loadbalancers': 'ibm_is_lb',
'lblisteners': 'ibm_is_lb_listener',
'lbmembers': 'ibm_is_lb_pool_member',
'lbpolicies': 'ibm_is_lb_listener_policy',
'lbpools': 'ibm_is_lb_pool',
'lbrules': 'ibm_is_lb_listener_policy_rule',
'networkinterfaces': 'ibm_is_instance_nic',
'publicgateways': 'ibm_is_public_gateway',
'resourcegroups': 'ibm_resource_group',
'sgheaders': 'ibm_is_security_group',
'sgnics': 'ibm_is_security_group_network_interface_attachment',
'sgrules': 'ibm_is_security_group_rule',
'sshkeys': 'ibm_is_ssh_key',
'subnets': 'ibm_is_subnet',
'transitconnections': 'ibm_tg_connection',
'transitgateways': 'ibm_tg_gateway',
'volumes': 'ibm_is_volume',
'vpcaddresses': 'ibm_is_vpc_address_prefix',
'vpcroutes': 'ibm_is_vpc_route',
'vpcs': 'ibm_is_vpc',
'vpnconnections': 'ibm_is_vpn_gateway_connection',
'vpngateways': 'ibm_is_vpn_gateway',
'localfiles': 'local_file', 
}

# Utility functions

# isna returns True for NA values such as None or numpy.NaN.
# isna returns False for empty strings or numpy.inf unless
# set pandas.options.mode.use_inf_as_na = True
# Note:
# Empty spreadsheet values start out as NaN but if a value is
# added and later deleted then the value can be an empty string.
# Checking pd.isna here doesn't work as value is 'nan'.
def novalue(value):
   empty = pd.isna(value)
   if empty:
      return True
   if type(value) == str:
      value = value.replace(' ', '')
      if value == '':
         return True
   if isinstance(value, str):
      value = value.replace(' ', '')
      if value == '':
         return True
      else:
         return False
   else:
      return False

def printline(options, tfname, line):
   outputdirectory = options['outputdirectory']

   pathname = os.path.join(outputdirectory, tfname)
   filepath, filename = os.path.split(pathname)

   # Check for existing module directory.
   if not os.path.exists(filepath):
      # Create new module directory.
      os.makedirs(filepath)

   if not os.path.exists(pathname):
      tf = open(pathname, 'w')
      tf.write(genheader)
      tf.write('\n')
      tf.close()

   tf = open(pathname, 'a')
   tf.write(line)
   tf.write('\n')
   tf.close()

   return
